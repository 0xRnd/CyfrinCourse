{"id":"5cf3d8435e55821499e1c092ff531df2","_format":"hh-sol-build-info-1","solcVersion":"0.8.24","solcLongVersion":"0.8.24+commit.e11b9ed9","input":{"language":"Solidity","sources":{"Contracts/SimpleStorage.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.24;\r\n\r\ncontract SimpleStorage {\r\n    uint myFavoriteNumber;\r\n\r\n    struct Person {\r\n        uint256 favoriteNumber;\r\n        string name;\r\n    }\r\n\r\n    Person[] public listOfPeople;\r\n\r\n    mapping(string => uint256) public nameToFavoriteNumber;\r\n\r\n    function store(uint256 _myFavoriteNumber) public\r\n    {\r\n        myFavoriteNumber=_myFavoriteNumber;\r\n    }\r\n\r\n    function retrieve() public view returns(uint256){\r\n        return myFavoriteNumber;\r\n    }\r\n\r\n    function addPerson(string memory _name, uint256 _favoriteNumber) public{\r\n        listOfPeople.push(Person(_favoriteNumber,_name));\r\n         nameToFavoriteNumber[_name] = _favoriteNumber;\r\n     }\r\n}\r\n\r\n//published contract on zksync sepolia\r\n//0xFaa9E0015037960B0A04Af606E976510E08AF23b"},"Contracts/StorageFactory.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.24;\r\n\r\nimport {SimpleStorage} from \"./SimpleStorage.sol\";\r\n\r\ncontract StorageFactory{\r\n\r\n    SimpleStorage[] public listOfSimpleStorageContracts;\r\n\r\n    function createSimpleStorageContract() public {\r\n        SimpleStorage newSimpleStorage = new SimpleStorage();\r\n        listOfSimpleStorageContracts.push(newSimpleStorage);\r\n    }\r\n}"}},"settings":{"evmVersion":"paris","optimizer":{"enabled":true,"mode":"3"},"outputSelection":{"*":{"*":["abi","evm.methodIdentifiers","metadata"],"":["ast"]}},"libraries":{}}},"output":{"errors":[],"version":"0.8.24","long_version":"0.8.24+commit.e11b9ed9.Linux.g++","zk_version":"1.4.1","sources":{"Contracts/SimpleStorage.sol":{"id":0,"ast":{"absolutePath":"Contracts/SimpleStorage.sol","exportedSymbols":{"SimpleStorage":[58]},"id":59,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity","0.8",".24"],"nodeType":"PragmaDirective","src":"33:23:0"},{"abstract":false,"baseContracts":[],"canonicalName":"SimpleStorage","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":58,"linearizedBaseContracts":[58],"name":"SimpleStorage","nameLocation":"69:13:0","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":3,"mutability":"mutable","name":"myFavoriteNumber","nameLocation":"95:16:0","nodeType":"VariableDeclaration","scope":58,"src":"90:21:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2,"name":"uint","nodeType":"ElementaryTypeName","src":"90:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"canonicalName":"SimpleStorage.Person","id":8,"members":[{"constant":false,"id":5,"mutability":"mutable","name":"favoriteNumber","nameLocation":"153:14:0","nodeType":"VariableDeclaration","scope":8,"src":"145:22:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4,"name":"uint256","nodeType":"ElementaryTypeName","src":"145:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":7,"mutability":"mutable","name":"name","nameLocation":"185:4:0","nodeType":"VariableDeclaration","scope":8,"src":"178:11:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":6,"name":"string","nodeType":"ElementaryTypeName","src":"178:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"name":"Person","nameLocation":"127:6:0","nodeType":"StructDefinition","scope":58,"src":"120:77:0","visibility":"public"},{"constant":false,"functionSelector":"2ebce631","id":12,"mutability":"mutable","name":"listOfPeople","nameLocation":"221:12:0","nodeType":"VariableDeclaration","scope":58,"src":"205:28:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Person_$8_storage_$dyn_storage","typeString":"struct SimpleStorage.Person[]"},"typeName":{"baseType":{"id":10,"nodeType":"UserDefinedTypeName","pathNode":{"id":9,"name":"Person","nameLocations":["205:6:0"],"nodeType":"IdentifierPath","referencedDeclaration":8,"src":"205:6:0"},"referencedDeclaration":8,"src":"205:6:0","typeDescriptions":{"typeIdentifier":"t_struct$_Person_$8_storage_ptr","typeString":"struct SimpleStorage.Person"}},"id":11,"nodeType":"ArrayTypeName","src":"205:8:0","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Person_$8_storage_$dyn_storage_ptr","typeString":"struct SimpleStorage.Person[]"}},"visibility":"public"},{"constant":false,"functionSelector":"8bab8dd5","id":16,"mutability":"mutable","name":"nameToFavoriteNumber","nameLocation":"276:20:0","nodeType":"VariableDeclaration","scope":58,"src":"242:54:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_string_memory_ptr_$_t_uint256_$","typeString":"mapping(string => uint256)"},"typeName":{"id":15,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":13,"name":"string","nodeType":"ElementaryTypeName","src":"250:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"nodeType":"Mapping","src":"242:26:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_string_memory_ptr_$_t_uint256_$","typeString":"mapping(string => uint256)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":14,"name":"uint256","nodeType":"ElementaryTypeName","src":"260:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"public"},{"body":{"id":25,"nodeType":"Block","src":"359:53:0","statements":[{"expression":{"id":23,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":21,"name":"myFavoriteNumber","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3,"src":"370:16:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":22,"name":"_myFavoriteNumber","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":18,"src":"387:17:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"370:34:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":24,"nodeType":"ExpressionStatement","src":"370:34:0"}]},"functionSelector":"6057361d","id":26,"implemented":true,"kind":"function","modifiers":[],"name":"store","nameLocation":"314:5:0","nodeType":"FunctionDefinition","parameters":{"id":19,"nodeType":"ParameterList","parameters":[{"constant":false,"id":18,"mutability":"mutable","name":"_myFavoriteNumber","nameLocation":"328:17:0","nodeType":"VariableDeclaration","scope":26,"src":"320:25:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":17,"name":"uint256","nodeType":"ElementaryTypeName","src":"320:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"319:27:0"},"returnParameters":{"id":20,"nodeType":"ParameterList","parameters":[],"src":"359:0:0"},"scope":58,"src":"305:107:0","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":33,"nodeType":"Block","src":"468:42:0","statements":[{"expression":{"id":31,"name":"myFavoriteNumber","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3,"src":"486:16:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":30,"id":32,"nodeType":"Return","src":"479:23:0"}]},"functionSelector":"2e64cec1","id":34,"implemented":true,"kind":"function","modifiers":[],"name":"retrieve","nameLocation":"429:8:0","nodeType":"FunctionDefinition","parameters":{"id":27,"nodeType":"ParameterList","parameters":[],"src":"437:2:0"},"returnParameters":{"id":30,"nodeType":"ParameterList","parameters":[{"constant":false,"id":29,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":34,"src":"460:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":28,"name":"uint256","nodeType":"ElementaryTypeName","src":"460:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"459:9:0"},"scope":58,"src":"420:90:0","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":56,"nodeType":"Block","src":"589:125:0","statements":[{"expression":{"arguments":[{"arguments":[{"id":45,"name":"_favoriteNumber","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":38,"src":"625:15:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":46,"name":"_name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":36,"src":"641:5:0","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":44,"name":"Person","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8,"src":"618:6:0","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_Person_$8_storage_ptr_$","typeString":"type(struct SimpleStorage.Person storage pointer)"}},"id":47,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"618:29:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Person_$8_memory_ptr","typeString":"struct SimpleStorage.Person memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Person_$8_memory_ptr","typeString":"struct SimpleStorage.Person memory"}],"expression":{"id":41,"name":"listOfPeople","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":12,"src":"600:12:0","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Person_$8_storage_$dyn_storage","typeString":"struct SimpleStorage.Person storage ref[] storage ref"}},"id":43,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"613:4:0","memberName":"push","nodeType":"MemberAccess","src":"600:17:0","typeDescriptions":{"typeIdentifier":"t_function_arraypush_nonpayable$_t_array$_t_struct$_Person_$8_storage_$dyn_storage_ptr_$_t_struct$_Person_$8_storage_$returns$__$attached_to$_t_array$_t_struct$_Person_$8_storage_$dyn_storage_ptr_$","typeString":"function (struct SimpleStorage.Person storage ref[] storage pointer,struct SimpleStorage.Person storage ref)"}},"id":48,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"600:48:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":49,"nodeType":"ExpressionStatement","src":"600:48:0"},{"expression":{"id":54,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":50,"name":"nameToFavoriteNumber","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":16,"src":"660:20:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_string_memory_ptr_$_t_uint256_$","typeString":"mapping(string memory => uint256)"}},"id":52,"indexExpression":{"id":51,"name":"_name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":36,"src":"681:5:0","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"660:27:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":53,"name":"_favoriteNumber","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":38,"src":"690:15:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"660:45:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":55,"nodeType":"ExpressionStatement","src":"660:45:0"}]},"functionSelector":"6f760f41","id":57,"implemented":true,"kind":"function","modifiers":[],"name":"addPerson","nameLocation":"527:9:0","nodeType":"FunctionDefinition","parameters":{"id":39,"nodeType":"ParameterList","parameters":[{"constant":false,"id":36,"mutability":"mutable","name":"_name","nameLocation":"551:5:0","nodeType":"VariableDeclaration","scope":57,"src":"537:19:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":35,"name":"string","nodeType":"ElementaryTypeName","src":"537:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":38,"mutability":"mutable","name":"_favoriteNumber","nameLocation":"566:15:0","nodeType":"VariableDeclaration","scope":57,"src":"558:23:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":37,"name":"uint256","nodeType":"ElementaryTypeName","src":"558:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"536:46:0"},"returnParameters":{"id":40,"nodeType":"ParameterList","parameters":[],"src":"589:0:0"},"scope":58,"src":"518:196:0","stateMutability":"nonpayable","virtual":false,"visibility":"public"}],"scope":59,"src":"60:657:0","usedErrors":[],"usedEvents":[]}],"src":"33:772:0"}},"Contracts/StorageFactory.sol":{"id":1,"ast":{"absolutePath":"Contracts/StorageFactory.sol","exportedSymbols":{"SimpleStorage":[58],"StorageFactory":[85]},"id":86,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":60,"literals":["solidity","0.8",".24"],"nodeType":"PragmaDirective","src":"33:23:1"},{"absolutePath":"Contracts/SimpleStorage.sol","file":"./SimpleStorage.sol","id":62,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":86,"sourceUnit":59,"src":"60:50:1","symbolAliases":[{"foreign":{"id":61,"name":"SimpleStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":58,"src":"68:13:1","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"StorageFactory","contractDependencies":[58],"contractKind":"contract","fullyImplemented":true,"id":85,"linearizedBaseContracts":[85],"name":"StorageFactory","nameLocation":"123:14:1","nodeType":"ContractDefinition","nodes":[{"constant":false,"functionSelector":"f39f3035","id":66,"mutability":"mutable","name":"listOfSimpleStorageContracts","nameLocation":"169:28:1","nodeType":"VariableDeclaration","scope":85,"src":"146:51:1","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_SimpleStorage_$58_$dyn_storage","typeString":"contract SimpleStorage[]"},"typeName":{"baseType":{"id":64,"nodeType":"UserDefinedTypeName","pathNode":{"id":63,"name":"SimpleStorage","nameLocations":["146:13:1"],"nodeType":"IdentifierPath","referencedDeclaration":58,"src":"146:13:1"},"referencedDeclaration":58,"src":"146:13:1","typeDescriptions":{"typeIdentifier":"t_contract$_SimpleStorage_$58","typeString":"contract SimpleStorage"}},"id":65,"nodeType":"ArrayTypeName","src":"146:15:1","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_SimpleStorage_$58_$dyn_storage_ptr","typeString":"contract SimpleStorage[]"}},"visibility":"public"},{"body":{"id":83,"nodeType":"Block","src":"252:133:1","statements":[{"assignments":[71],"declarations":[{"constant":false,"id":71,"mutability":"mutable","name":"newSimpleStorage","nameLocation":"277:16:1","nodeType":"VariableDeclaration","scope":83,"src":"263:30:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_SimpleStorage_$58","typeString":"contract SimpleStorage"},"typeName":{"id":70,"nodeType":"UserDefinedTypeName","pathNode":{"id":69,"name":"SimpleStorage","nameLocations":["263:13:1"],"nodeType":"IdentifierPath","referencedDeclaration":58,"src":"263:13:1"},"referencedDeclaration":58,"src":"263:13:1","typeDescriptions":{"typeIdentifier":"t_contract$_SimpleStorage_$58","typeString":"contract SimpleStorage"}},"visibility":"internal"}],"id":76,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":74,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"NewExpression","src":"296:17:1","typeDescriptions":{"typeIdentifier":"t_function_creation_nonpayable$__$returns$_t_contract$_SimpleStorage_$58_$","typeString":"function () returns (contract SimpleStorage)"},"typeName":{"id":73,"nodeType":"UserDefinedTypeName","pathNode":{"id":72,"name":"SimpleStorage","nameLocations":["300:13:1"],"nodeType":"IdentifierPath","referencedDeclaration":58,"src":"300:13:1"},"referencedDeclaration":58,"src":"300:13:1","typeDescriptions":{"typeIdentifier":"t_contract$_SimpleStorage_$58","typeString":"contract SimpleStorage"}}},"id":75,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"296:19:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_SimpleStorage_$58","typeString":"contract SimpleStorage"}},"nodeType":"VariableDeclarationStatement","src":"263:52:1"},{"expression":{"arguments":[{"id":80,"name":"newSimpleStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":71,"src":"360:16:1","typeDescriptions":{"typeIdentifier":"t_contract$_SimpleStorage_$58","typeString":"contract SimpleStorage"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_SimpleStorage_$58","typeString":"contract SimpleStorage"}],"expression":{"id":77,"name":"listOfSimpleStorageContracts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":66,"src":"326:28:1","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_SimpleStorage_$58_$dyn_storage","typeString":"contract SimpleStorage[] storage ref"}},"id":79,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"355:4:1","memberName":"push","nodeType":"MemberAccess","src":"326:33:1","typeDescriptions":{"typeIdentifier":"t_function_arraypush_nonpayable$_t_array$_t_contract$_SimpleStorage_$58_$dyn_storage_ptr_$_t_contract$_SimpleStorage_$58_$returns$__$attached_to$_t_array$_t_contract$_SimpleStorage_$58_$dyn_storage_ptr_$","typeString":"function (contract SimpleStorage[] storage pointer,contract SimpleStorage)"}},"id":81,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"326:51:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":82,"nodeType":"ExpressionStatement","src":"326:51:1"}]},"functionSelector":"1dda6541","id":84,"implemented":true,"kind":"function","modifiers":[],"name":"createSimpleStorageContract","nameLocation":"215:27:1","nodeType":"FunctionDefinition","parameters":{"id":67,"nodeType":"ParameterList","parameters":[],"src":"242:2:1"},"returnParameters":{"id":68,"nodeType":"ParameterList","parameters":[],"src":"252:0:1"},"scope":85,"src":"206:179:1","stateMutability":"nonpayable","virtual":false,"visibility":"public"}],"scope":86,"src":"114:274:1","usedErrors":[],"usedEvents":[]}],"src":"33:355:1"}}},"contracts":{"Contracts/SimpleStorage.sol":{"SimpleStorage":{"abi":[{"inputs":[{"internalType":"string","name":"_name","type":"string"},{"internalType":"uint256","name":"_favoriteNumber","type":"uint256"}],"name":"addPerson","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"listOfPeople","outputs":[{"internalType":"uint256","name":"favoriteNumber","type":"uint256"},{"internalType":"string","name":"name","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"string","name":"","type":"string"}],"name":"nameToFavoriteNumber","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"retrieve","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_myFavoriteNumber","type":"uint256"}],"name":"store","outputs":[],"stateMutability":"nonpayable","type":"function"}],"metadata":{"optimizer_settings":{"is_debug_logging_enabled":false,"is_fallback_to_size_enabled":false,"is_system_request_memoization_disabled":false,"is_verify_each_enabled":false,"jump_table_density_threshold":null,"level_back_end":"Aggressive","level_middle_end":"Aggressive","level_middle_end_size":"Zero"},"solc_metadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_favoriteNumber\",\"type\":\"uint256\"}],\"name\":\"addPerson\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"listOfPeople\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"favoriteNumber\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"nameToFavoriteNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"retrieve\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_myFavoriteNumber\",\"type\":\"uint256\"}],\"name\":\"store\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"Contracts/SimpleStorage.sol\":\"SimpleStorage\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf[xa[r]EscLMcCTUtTOntnfDIulLculVcul [j]Tpeulxa[rul]xa[r]cLgvifCTUca[r]LSsTFOtfDnca[r]Iulc]jmul[jul] VcTOcul jmul:fDnTOcmu\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[]},\"sources\":{\"Contracts/SimpleStorage.sol\":{\"keccak256\":\"0xecad36087bef553af09b94043bef7407b010b76650bac212c694104e66a2dd63\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d6c6aa97cc32475749fe959056bf4525798f22fb0361f9954438aa053342e7ee\",\"dweb:/ipfs/QmNmiDvHykU7FfgiFvA44VXp6VHCQ83NE11vFEL5LguDTy\"]}},\"version\":1}","solc_version":"0.8.24","solc_zkvm_edition":null,"zk_version":"1.4.1"},"evm":{"legacyAssembly":null,"assembly":"\t.text\n\t.file\t\"SimpleStorage.sol:SimpleStorage\"\n\t.globl\t__entry\n__entry:\n.func_begin0:\n\tnop\tstack+=[8]\n\tadd\tr2, r0, r3\n\tptr.add\tr1, r0, stack[@ptr_calldata]\n\tadd\t128, r0, r4\n\tst.1\t64, r4\n\tadd\tr1, r0, r2\n\tshr.s\t96, r2, r2\n\tand\t@CPI0_0[0], r2, r2\n\tand!\t1, r3, r3\n\tjump.ne\t@.BB0_1\n\tsub.s!\t4, r2, r3\n\tjump.lt\t@.BB0_2\n\tld\tr1, r3\n\tshr.s\t224, r3, r3\n\tsub.s!\t@CPI0_2[0], r3, r5\n\tjump.le\t@.BB0_6\n\tsub.s!\t@CPI0_3[0], r3, r5\n\tjump.eq\t@.BB0_28\n\tsub.s!\t@CPI0_4[0], r3, r5\n\tjump.eq\t@.BB0_31\n\tsub.s!\t@CPI0_5[0], r3, r3\n\tjump.ne\t@.BB0_2\n\tcontext.get_context_u128\tr3\n\tsub.s!\t36, r2, r4\n\tjump.lt\t@.BB0_2\n\tsub!\tr3, r0, r3\n\tjump.ne\t@.BB0_2\n\tptr.add.s\t4, r1, r1\n\tld\tr1, r1\n\tsub.s!\t@CPI0_8[0], r1, r3\n\tjump.gt\t@.BB0_2\n\tadd\t4, r1, r1\n\tnear_call\tr0, @abi_decode_string, @DEFAULT_UNWIND\n\tld.1.inc\tr1, r3, r1\n\tadd\tr3, r0, stack-[7]\n\tld.1\t64, r2\n\tadd\tr2, r0, stack-[8]\n\tnear_call\tr0, @copy_memory_to_memory_with_cleanup, @DEFAULT_UNWIND\n\tadd\tstack-[7], r0, r3\n\tadd\tstack-[8], r0, r1\n\tadd\tr3, r1, r4\n\tadd\t2, r0, r2\n\tst.1\tr4, r2\n\tadd\t32, r3, r2\n\tnear_call\tr0, @__sha3, @DEFAULT_UNWIND\n\tsload\tr1, r1\n\tld.1\t64, r2\n\tst.1\tr2, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t64, r2, r1\n\tor\t@CPI0_9[0], r1, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_1:\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_2\n\tadd\t32, r0, r1\n\tst.2\t256, r1\n\tst.2\t288, r0\n\tadd\t@CPI0_1[0], r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_6:\n\tsub.s!\t@CPI0_6[0], r3, r4\n\tjump.eq\t@.BB0_11\n\tsub.s!\t@CPI0_7[0], r3, r3\n\tjump.ne\t@.BB0_2\n\tcontext.get_context_u128\tr3\n\tsub.s!\t36, r2, r2\n\tjump.lt\t@.BB0_2\n\tsub!\tr3, r0, r2\n\tjump.ne\t@.BB0_2\n\tptr.add.s\t4, r1, r1\n\tld\tr1, r1\n\tadd\t1, r0, r2\n\tsload\tr2, r3\n\tsub!\tr1, r3, r3\n\tjump.ge\t@.BB0_2\n\tst.1\t0, r2\n\tshl.s\t1, r1, r4\n\tadd\t@CPI0_14[0], r4, r1\n\tsload\tr1, r2\n\tand!\t1, r2, r3\n\tshr.s\t1, r2, r5\n\tand\t127, r5, r6\n\tadd.ne\tr5, r0, r6\n\tadd\t@CPI0_13[0], r4, r4\n\tsub.s!\t31, r6, r5\n\tadd\t0, r0, r5\n\tadd.gt\t1, r0, r5\n\tsub!\tr3, r5, r5\n\tjump.eq\t@.BB0_19\n.BB0_17:\n\tadd\t@CPI0_16[0], r0, r1\n\tst.1\t0, r1\n\tadd\t34, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI0_17[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_28:\n\tcontext.get_context_u128\tr3\n\tsub.s!\t36, r2, r2\n\tjump.lt\t@.BB0_2\n\tsub!\tr3, r0, r2\n\tjump.ne\t@.BB0_2\n\tptr.add.s\t4, r1, r1\n\tld\tr1, r1\n\tsstore\tr0, r1\n\tadd\tr0, r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_31:\n\tcontext.get_context_u128\tr3\n\tsub.s!\t68, r2, r5\n\tjump.lt\t@.BB0_2\n\tsub!\tr3, r0, r3\n\tjump.ne\t@.BB0_2\n\tptr.add.s\t4, r1, r3\n\tld\tr3, r5\n\tsub.s!\t@CPI0_8[0], r5, r3\n\tjump.gt\t@.BB0_2\n\tadd\t35, r5, r3\n\tsub!\tr3, r2, r3\n\tjump.ge\t@.BB0_2\n\tadd\t4, r5, r6\n\tptr.add\tr1, r6, r3\n\tld\tr3, r3\n\tsub.s!\t@CPI0_10[0], r3, r7\n\tjump.ge\t@.BB0_36\n\tadd\t31, r3, r7\n\tsub.s\t32, r0, r10\n\tand\tr7, r10, r7\n\tadd\t63, r7, r7\n\tand\tr7, r10, r7\n\tsub.s!\t@CPI0_11[0], r7, r8\n\tjump.le\t@.BB0_38\n.BB0_36:\n\tadd\t@CPI0_16[0], r0, r1\n\tst.1\t0, r1\n\tadd\t65, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI0_17[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_11:\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_2\n\tsload\tr0, r1\n\tst.1\t128, r1\n\tadd\t@CPI0_18[0], r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_19:\n\tsload\tr4, r4\n\tadd\tr4, r0, stack-[8]\n\tst.1\t128, r6\n\tsub!\tr3, r0, r3\n\tjump.eq\t@.BB0_21\n\tadd\tr6, r0, stack-[7]\n\tst.1\t0, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_15[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_2\n\tadd\tstack-[7], r0, r5\n\tsub!\tr5, r0, r2\n\tjump.ne\t@.BB0_25\n\tadd\t160, r0, r1\n\tjump\t@.BB0_20\n.BB0_38:\n\tadd\t128, r7, r7\n\tst.1\t64, r7\n\tst.1\t128, r3\n\tadd\tr5, r3, r5\n\tadd\t36, r5, r5\n\tsub!\tr5, r2, r2\n\tjump.le\t@.BB0_39\n.BB0_2:\n\tadd\tr0, r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_21:\n\tsub.s\t256, r0, r1\n\tand\tr2, r1, r1\n\tst.1\t160, r1\n\tsub!\tr6, r0, r1\n\tadd\t192, r0, r1\n\tadd.eq\t160, r0, r1\n.BB0_20:\n\tsub.s\t128, r1, r2\n\tadd\t128, r0, r1\n\tnear_call\tr0, @finalize_allocation, @DEFAULT_UNWIND\n\tld.1\t64, r4\n\tadd\tr4, r0, stack-[7]\n\tadd\t32, r4, r1\n\tadd\t64, r0, r2\n\tst.1\tr1, r2\n\tadd\tstack-[8], r0, r1\n\tst.1\tr4, r1\n\tadd\t64, r4, r1\n\tld.1\t128, r3\n\tadd\tr3, r0, stack-[8]\n\tst.1\tr1, r3\n\tadd\t96, r4, r2\n\tadd\t160, r0, r1\n\tnear_call\tr0, @copy_memory_to_memory_with_cleanup, @DEFAULT_UNWIND\n\tadd\tstack-[8], r0, r1\n\tadd\t31, r1, r1\n\tsub.s\t32, r0, r2\n\tand\tr1, r2, r1\n\tadd\t96, r1, r1\n\tadd\t@CPI0_0[0], r0, r2\n\tsub.s!\t@CPI0_0[0], r1, r3\n\tadd.ge\tr2, r0, r1\n\tadd\tstack-[7], r0, r4\n\tsub.s!\t@CPI0_0[0], r4, r3\n\tadd.ge\tr2, r0, r4\n\tshl.s\t64, r4, r2\n\tshl.s\t96, r1, r1\n\tor\tr1, r2, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_39:\n\tadd\t32, r6, r2\n\tptr.add\tr1, r2, r2\n\tand\t31, r3, r5\n\tshr.s!\t5, r3, r6\n\tjump.eq\t@.BB0_69\n\tadd\tr0, r0, r7\n.BB0_41:\n\tshl.s\t5, r7, r8\n\tptr.add\tr2, r8, r9\n\tld\tr9, r9\n\tadd\t160, r8, r8\n\tst.1\tr8, r9\n\tadd\t1, r7, r7\n\tsub!\tr7, r6, r8\n\tjump.lt\t@.BB0_41\n.BB0_69:\n\tsub!\tr5, r0, r7\n\tjump.eq\t@.BB0_43\n\tshl.s\t5, r6, r6\n\tptr.add\tr2, r6, r2\n\tshl.s\t3, r5, r5\n\tadd\t160, r6, r6\n\tld.1\tr6, r7\n\tshl\tr7, r5, r7\n\tshr\tr7, r5, r7\n\tld\tr2, r2\n\tsub\t256, r5, r5\n\tshr\tr2, r5, r2\n\tshl\tr2, r5, r2\n\tor\tr2, r7, r2\n\tst.1\tr6, r2\n.BB0_43:\n\tadd\t160, r3, r2\n\tst.1\tr2, r0\n\tptr.add.s\t36, r1, r1\n\tld\tr1, r5\n\tld.1\t64, r1\n\tsub.s!\t@CPI0_12[0], r1, r2\n\tjump.gt\t@.BB0_36\n\tadd\t64, r1, r2\n\tst.1\t64, r2\n\tst.1.inc\tr1, r5, r2\n\tst.1\tr2, r4\n\tadd\t1, r0, r6\n\tsload\tr6, r3\n\tsub.s!\t@CPI0_8[0], r3, r4\n\tjump.gt\t@.BB0_36\n\tadd\t1, r3, r4\n\tsstore\tr6, r4\n\tst.1\t0, r6\n\tld.1\tr1, r1\n\tshl.s\t1, r3, r3\n\tadd\t@CPI0_13[0], r3, r4\n\tsstore\tr4, r1\n\tadd\t@CPI0_14[0], r3, r3\n\tld.1\tr2, r7\n\tld.1.inc\tr7, r4, r8\n\tsub.s!\t@CPI0_8[0], r4, r1\n\tjump.gt\t@.BB0_36\n\tsload\tr3, r1\n\tand!\t1, r1, r2\n\tshr.s\t1, r1, r2\n\tand\t127, r2, r9\n\tadd.ne\tr2, r0, r9\n\tsub.s!\t31, r9, r2\n\tadd\t0, r0, r2\n\tadd.gt\t1, r0, r2\n\txor\tr1, r2, r1\n\tand!\t1, r1, r1\n\tjump.ne\t@.BB0_17\n\tadd\tr8, r0, stack-[1]\n\tadd\tr7, r0, stack-[2]\n\tadd\tr4, r0, stack-[8]\n\tadd\tr6, r0, stack-[6]\n\tadd\tr3, r0, stack-[7]\n\tadd\tr10, r0, stack-[4]\n\tadd\tr5, r0, stack-[5]\n\tadd\tr9, r0, stack-[3]\n\tsub.s!\t32, r9, r1\n\tjump.lt\t@.BB0_51\n\tadd\tstack-[7], r0, r1\n\tst.1\t0, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_15[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_2\n\tadd\tstack-[8], r0, r3\n\tadd\t31, r3, r2\n\tshr.s\t5, r2, r2\n\tsub.s!\t32, r3, r3\n\tadd.lt\tr0, r0, r2\n\tld\tr1, r3\n\tadd\tstack-[3], r0, r1\n\tadd\t31, r1, r1\n\tshr.s\t5, r1, r1\n\tadd\tr3, r1, r1\n\tadd\tr3, r2, r2\n\tsub!\tr2, r1, r3\n\tjump.ge\t@.BB0_51\n.BB0_52:\n\tsstore\tr2, r0\n\tadd\t1, r2, r2\n\tsub!\tr2, r1, r3\n\tjump.lt\t@.BB0_52\n.BB0_51:\n\tadd\tstack-[8], r0, r1\n\tsub.s!\t31, r1, r1\n\tjump.le\t@.BB0_62\n\tadd\tstack-[7], r0, r1\n\tst.1\t0, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_15[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tadd\tstack-[4], r0, r2\n\tjump.eq\t@.BB0_2\n\tand!\tstack-[8], r2, r3\n\tld\tr1, r1\n\tjump.ne\t@.BB0_57\n\tadd\t32, r0, r2\n\tjump\t@.BB0_59\n.BB0_25:\n\tld\tr1, r1\n\tadd\tr0, r0, r3\n.BB0_26:\n\tadd\tr3, r0, r2\n\tsload\tr1, r3\n\tadd\t160, r2, r4\n\tst.1\tr4, r3\n\tadd\t1, r1, r1\n\tadd\t32, r2, r3\n\tsub!\tr3, r5, r4\n\tjump.lt\t@.BB0_26\n\tadd\t192, r2, r1\n\tjump\t@.BB0_20\n.BB0_62:\n\tsub!\tstack-[8], r0, r1\n\tadd\tr0, r0, r1\n\tjump.eq\t@.BB0_64\n\tadd\tstack-[1], r0, r1\n\tld.1\tr1, r1\n.BB0_64:\n\tadd\tstack-[8], r0, r4\n\tshl.s\t3, r4, r2\n\tsub.s\t1, r0, r3\n\tshr\tr3, r2, r2\n\txor\tr2, r3, r2\n\tand\tr1, r2, r1\n\tshl.s\t1, r4, stack-[6]\n\tjump\t@.BB0_53\n.BB0_57:\n\tadd\t32, r0, r2\n\tadd\tr0, r0, r4\n\tadd\tstack-[2], r0, r6\n.BB0_58:\n\tadd\tr2, r6, r5\n\tld.1\tr5, r5\n\tsstore\tr1, r5\n\tadd\t32, r2, r2\n\tadd\t1, r1, r1\n\tadd\t32, r4, r4\n\tsub!\tr4, r3, r5\n\tjump.lt\t@.BB0_58\n.BB0_59:\n\tsub.s!\tstack-[8], r3, r3\n\tjump.ge\t@.BB0_61\n\tadd\tstack-[8], r0, r3\n\tshl.s\t3, r3, r3\n\tand\t248, r3, r3\n\tsub.s\t1, r0, r4\n\tshr\tr4, r3, r3\n\txor\tr3, r4, r3\n\tadd\tstack-[2], r2, r2\n\tld.1\tr2, r2\n\tand\tr2, r3, r2\n\tsstore\tr1, r2\n.BB0_61:\n\tadd\tstack-[8], r0, r1\n\tshl.s\t1, r1, r1\n.BB0_53:\n\tor\tstack-[6], r1, r1\n\tadd\tstack-[7], r0, r2\n\tsstore\tr2, r1\n\tld.1\t128, r3\n\tadd\tr3, r0, stack-[7]\n\tld.1\t64, r2\n\tadd\tr2, r0, stack-[8]\n\tadd\t160, r0, r1\n\tnear_call\tr0, @copy_memory_to_memory_with_cleanup, @DEFAULT_UNWIND\n\tadd\tstack-[7], r0, r3\n\tadd\tstack-[8], r0, r1\n\tadd\tr3, r1, r4\n\tadd\t2, r0, r2\n\tst.1\tr4, r2\n\tadd\t32, r3, r2\n\tnear_call\tr0, @__sha3, @DEFAULT_UNWIND\n\tadd\tstack-[5], r0, r2\n\tsstore\tr1, r2\n\tadd\tr0, r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.func_end0:\n\nfinalize_allocation:\n.func_begin1:\n\tadd\t31, r2, r2\n\tsub.s\t32, r0, r3\n\tand\tr2, r3, r2\n\tadd\tr2, r1, r1\n\tsub!\tr1, r2, r2\n\tadd\t0, r0, r2\n\tadd.lt\t1, r0, r2\n\tsub.s!\t@CPI1_0[0], r1, r3\n\tjump.gt\t@.BB1_2\n\tand!\t1, r2, r2\n\tjump.ne\t@.BB1_2\n\tst.1\t64, r1\n\tret\n.BB1_2:\n\tadd\t@CPI1_1[0], r0, r1\n\tst.1\t0, r1\n\tadd\t65, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI1_2[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.func_end1:\n\ncopy_memory_to_memory_with_cleanup:\n.func_begin2:\n\tsub!\tr3, r0, r4\n\tjump.eq\t@.BB2_3\n\tadd\tr0, r0, r4\n.BB2_2:\n\tadd\tr4, r2, r5\n\tadd\tr4, r1, r6\n\tld.1\tr6, r6\n\tst.1\tr5, r6\n\tadd\t32, r4, r4\n\tsub!\tr4, r3, r5\n\tjump.lt\t@.BB2_2\n.BB2_3:\n\tadd\tr3, r2, r1\n\tst.1\tr1, r0\n\tret\n.func_end2:\n\nabi_decode_string:\n.func_begin3:\n\tadd\tr1, r0, r3\n\tadd\t31, r3, r1\n\tadd\t@CPI3_0[0], r0, r4\n\tsub!\tr1, r2, r5\n\tadd\tr0, r0, r5\n\tadd.lt\tr4, r0, r5\n\tand\t@CPI3_0[0], r2, r6\n\tand\t@CPI3_0[0], r1, r1\n\tsub!\tr1, r6, r7\n\tadd.le\tr0, r0, r4\n\txor\tr1, r6, r1\n\tsub.s!\t@CPI3_0[0], r1, r1\n\tadd.ne\tr5, r0, r4\n\tsub!\tr4, r0, r1\n\tjump.eq\t@.BB3_1\n\tptr.add\tstack[@ptr_calldata], r0, r6\n\tptr.add\tr6, r3, r1\n\tld\tr1, r4\n\tsub.s!\t@CPI3_1[0], r4, r1\n\tjump.ge\t@.BB3_3\n\tadd\t31, r4, r1\n\tsub.s\t32, r0, r5\n\tand\tr1, r5, r1\n\tadd\t63, r1, r1\n\tand\tr1, r5, r5\n\tld.1\t64, r1\n\tadd\tr1, r5, r5\n\tsub!\tr5, r1, r7\n\tadd\t0, r0, r7\n\tadd.lt\t1, r0, r7\n\tsub.s!\t@CPI3_2[0], r5, r8\n\tjump.gt\t@.BB3_3\n\tand!\t1, r7, r7\n\tjump.ne\t@.BB3_3\n\tst.1\t64, r5\n\tst.1.inc\tr1, r4, r5\n\tadd\t32, r3, r3\n\tadd\tr3, r4, r7\n\tsub!\tr7, r2, r2\n\tjump.gt\t@.BB3_1\n\tptr.add\tr6, r3, r3\n\tand\t31, r4, r2\n\tshr.s!\t5, r4, r6\n\tjump.eq\t@.BB3_12\n\tadd\tr0, r0, r7\n.BB3_9:\n\tshl.s\t5, r7, r8\n\tadd\tr5, r8, r9\n\tptr.add\tr3, r8, r8\n\tld\tr8, r8\n\tst.1\tr9, r8\n\tadd\t1, r7, r7\n\tsub!\tr7, r6, r8\n\tjump.lt\t@.BB3_9\n.BB3_12:\n\tsub!\tr2, r0, r7\n\tjump.eq\t@.BB3_11\n\tshl.s\t5, r6, r6\n\tptr.add\tr3, r6, r3\n\tadd\tr5, r6, r6\n\tshl.s\t3, r2, r2\n\tld.1\tr6, r7\n\tshl\tr7, r2, r7\n\tshr\tr7, r2, r7\n\tld\tr3, r3\n\tsub\t256, r2, r2\n\tshr\tr3, r2, r3\n\tshl\tr3, r2, r2\n\tor\tr2, r7, r2\n\tst.1\tr6, r2\n.BB3_11:\n\tadd\tr5, r4, r2\n\tst.1\tr2, r0\n\tret\n.BB3_3:\n\tadd\t@CPI3_3[0], r0, r1\n\tst.1\t0, r1\n\tadd\t65, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI3_4[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB3_1:\n\tadd\tr0, r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.func_end3:\n\n__sha3:\n.func_begin4:\n\tadd\t@CPI4_0[0], r0, r3\n\tsub.s!\t@CPI4_0[0], r1, r4\n\tadd.ge\tr3, r0, r1\n\tshl.s\t64, r1, r1\n\tsub.s!\t@CPI4_0[0], r2, r4\n\tadd.ge\tr3, r0, r2\n\tshl.s\t96, r2, r2\n\tor\tr2, r1, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI4_0[0], r2, r4\n\tadd.ge\tr3, r0, r2\n\tshl.s\t192, r2, r2\n\tor\tr2, r1, r1\n\tor\t@CPI4_1[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB4_2\n\tld\tr1, r1\n\tret\n.BB4_2:\n\tadd\tr0, r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.func_end4:\n\n__staticcall:\n.func_begin5:\n.tmp0:\n\tfar_call.static\tr1, r2, @.BB5_2\n.tmp1:\n\tadd\t1, r0, r2\n\tret\n.BB5_2:\n.tmp2:\n\tadd\tr0, r0, r2\n\tret\n.func_end5:\n\n\t.data\n\t.p2align\t5, 0x0\nptr_calldata:\n.cell\t0\n\n\t.note.GNU-stack\n\t.rodata\nCPI0_0:\nCPI4_0:\n\t.cell 4294967295\nCPI0_1:\n\t.cell 53919893334301279589334030174039261352344891250716429051063678533632\nCPI0_2:\n\t.cell 1616328220\nCPI0_3:\n\t.cell 1616328221\nCPI0_4:\n\t.cell 1870008129\nCPI0_5:\n\t.cell 2343275989\nCPI0_6:\n\t.cell 778358465\nCPI0_7:\n\t.cell 784131633\nCPI0_8:\nCPI1_0:\nCPI3_2:\n\t.cell 18446744073709551615\nCPI0_9:\n\t.cell 2535301200456458802993406410752\nCPI0_10:\nCPI3_1:\n\t.cell 18446744073709551616\nCPI0_11:\n\t.cell 18446744073709551487\nCPI0_12:\n\t.cell 18446744073709551551\nCPI0_13:\n\t.cell -35707666377435648211887908874984608119992236509074197713628505308453184860938\nCPI0_14:\n\t.cell -35707666377435648211887908874984608119992236509074197713628505308453184860937\nCPI0_15:\n\t.cell 904625697166532776746648320380374280103671757735618107014721178055227736064\nCPI0_16:\nCPI1_1:\nCPI3_3:\n\t.cell 35408467139433450592217433187231851964531694900788300625387963629091585785856\nCPI0_17:\nCPI1_2:\nCPI3_4:\n\t.cell 2852213850513516153367582212096\nCPI0_18:\n\t.cell 2535301202817642044428229017600\nCPI3_0:\n\t.cell -57896044618658097711785492504343953926634992332820282019728792003956564819968\nCPI4_1:\n\t.cell 904625697166532776746648320380374280103671755200316906558262375061821325312\n","bytecode":{"object":""},"methodIdentifiers":{"addPerson(string,uint256)":"6f760f41","listOfPeople(uint256)":"2ebce631","nameToFavoriteNumber(string)":"8bab8dd5","retrieve()":"2e64cec1","store(uint256)":"6057361d"}},"irOptimized":"/// @use-src 0:\"Contracts/SimpleStorage.sol\"\nobject \"SimpleStorage_58\" {\n    code {\n        {\n            /// @src 0:60:717  \"contract SimpleStorage {...\"\n            let _1 := memoryguard(0x80)\n            mstore(64, _1)\n            if callvalue() { revert(0, 0) }\n            let _2 := datasize(\"SimpleStorage_58_deployed\")\n            codecopy(_1, dataoffset(\"SimpleStorage_58_deployed\"), _2)\n            return(_1, _2)\n        }\n    }\n    /// @use-src 0:\"Contracts/SimpleStorage.sol\"\n    object \"SimpleStorage_58_deployed\" {\n        code {\n            {\n                /// @src 0:60:717  \"contract SimpleStorage {...\"\n                let _1 := memoryguard(0x80)\n                let _2 := 64\n                mstore(_2, _1)\n                let _3 := 4\n                if iszero(lt(calldatasize(), _3))\n                {\n                    let _4 := 0\n                    switch shr(224, calldataload(_4))\n                    case 0x2e64cec1 {\n                        if callvalue() { revert(_4, _4) }\n                        if slt(add(calldatasize(), not(3)), _4) { revert(_4, _4) }\n                        mstore(_1, sload(_4))\n                        return(_1, 32)\n                    }\n                    case 0x2ebce631 {\n                        if callvalue() { revert(_4, _4) }\n                        let _5 := 32\n                        if slt(add(calldatasize(), not(3)), _5) { revert(_4, _4) }\n                        let value := calldataload(_3)\n                        let _6 := 1\n                        /// @src 0:205:233  \"Person[] public listOfPeople\"\n                        if iszero(lt(value, /** @src 0:60:717  \"contract SimpleStorage {...\" */ sload(1)))\n                        /// @src 0:205:233  \"Person[] public listOfPeople\"\n                        {\n                            revert(/** @src 0:60:717  \"contract SimpleStorage {...\" */ _4, _4)\n                        }\n                        /// @src 0:205:233  \"Person[] public listOfPeople\"\n                        let slot, offset := storage_array_index_access_struct_Person__dyn(value)\n                        /// @src 0:60:717  \"contract SimpleStorage {...\"\n                        let _7 := sload(/** @src 0:205:233  \"Person[] public listOfPeople\" */ slot)\n                        let _8 := add(slot, /** @src 0:60:717  \"contract SimpleStorage {...\" */ 1)\n                        let memPtr := mload(_2)\n                        let ret := _4\n                        let slotValue := sload(_8)\n                        let length := extract_byte_array_length(slotValue)\n                        mstore(memPtr, length)\n                        let updated_pos := add(memPtr, _5)\n                        switch and(slotValue, 1)\n                        case 0 {\n                            mstore(updated_pos, and(slotValue, not(255)))\n                            ret := add(add(memPtr, shl(5, iszero(iszero(length)))), _5)\n                        }\n                        case 1 {\n                            mstore(_4, _8)\n                            let dataPos := keccak256(_4, _5)\n                            let i := _4\n                            for { } lt(i, length) { i := add(i, _5) }\n                            {\n                                mstore(add(add(memPtr, i), _5), sload(dataPos))\n                                dataPos := add(dataPos, _6)\n                            }\n                            ret := add(add(memPtr, i), _5)\n                        }\n                        finalize_allocation(memPtr, sub(ret, memPtr))\n                        let memPos := mload(_2)\n                        mstore(memPos, _7)\n                        mstore(add(memPos, _5), _2)\n                        let length_1 := mload(memPtr)\n                        mstore(add(memPos, _2), length_1)\n                        copy_memory_to_memory_with_cleanup(updated_pos, add(memPos, 96), length_1)\n                        return(memPos, add(sub(add(memPos, and(add(length_1, 31), not(31))), memPos), 96))\n                    }\n                    case 0x6057361d {\n                        if callvalue() { revert(_4, _4) }\n                        if slt(add(calldatasize(), not(3)), 32) { revert(_4, _4) }\n                        sstore(_4, calldataload(_3))\n                        return(_4, _4)\n                    }\n                    case 0x6f760f41 {\n                        if callvalue() { revert(_4, _4) }\n                        if slt(add(calldatasize(), not(3)), _2) { revert(_4, _4) }\n                        let offset_1 := calldataload(_3)\n                        let _9 := 0xffffffffffffffff\n                        if gt(offset_1, _9) { revert(_4, _4) }\n                        let value0 := abi_decode_string(add(_3, offset_1), calldatasize())\n                        let value_1 := calldataload(36)\n                        let memPtr_1 := mload(_2)\n                        let newFreePtr := add(memPtr_1, _2)\n                        if or(gt(newFreePtr, _9), lt(newFreePtr, memPtr_1))\n                        {\n                            mstore(_4, shl(224, 0x4e487b71))\n                            mstore(_3, 0x41)\n                            revert(_4, 36)\n                        }\n                        mstore(_2, newFreePtr)\n                        mstore(memPtr_1, value_1)\n                        let _10 := 32\n                        /// @src 0:618:647  \"Person(_favoriteNumber,_name)\"\n                        let _11 := add(memPtr_1, /** @src 0:60:717  \"contract SimpleStorage {...\" */ _10)\n                        mstore(_11, value0)\n                        let _12 := 1\n                        let oldLen := sload(_12)\n                        if iszero(lt(oldLen, 18446744073709551616))\n                        {\n                            mstore(_4, shl(224, 0x4e487b71))\n                            mstore(_3, 0x41)\n                            revert(_4, 36)\n                        }\n                        sstore(_12, add(oldLen, _12))\n                        let slot_1, offset_2 := storage_array_index_access_struct_Person__dyn(oldLen)\n                        if offset_2\n                        {\n                            mstore(_4, shl(224, 0x4e487b71))\n                            mstore(_3, _4)\n                            revert(_4, 36)\n                        }\n                        sstore(slot_1, mload(memPtr_1))\n                        let memberSlot := add(slot_1, _12)\n                        let _13 := mload(_11)\n                        let newLen := mload(_13)\n                        if gt(newLen, _9)\n                        {\n                            mstore(_4, shl(224, 0x4e487b71))\n                            mstore(_3, 0x41)\n                            revert(_4, 36)\n                        }\n                        let _14 := extract_byte_array_length(sload(memberSlot))\n                        if gt(_14, 31)\n                        {\n                            mstore(_4, memberSlot)\n                            let data := keccak256(_4, _10)\n                            let deleteStart := add(data, shr(5, add(newLen, 31)))\n                            if lt(newLen, _10) { deleteStart := data }\n                            let _15 := add(data, shr(5, add(_14, 31)))\n                            let start := deleteStart\n                            for { } lt(start, _15) { start := add(start, _12) }\n                            { sstore(start, _4) }\n                        }\n                        let srcOffset := _4\n                        srcOffset := _10\n                        switch gt(newLen, 31)\n                        case 1 {\n                            let loopEnd := and(newLen, not(31))\n                            mstore(_4, memberSlot)\n                            let dstPtr := keccak256(_4, _10)\n                            let i_1 := _4\n                            for { } lt(i_1, loopEnd) { i_1 := add(i_1, _10) }\n                            {\n                                sstore(dstPtr, mload(add(_13, srcOffset)))\n                                dstPtr := add(dstPtr, _12)\n                                srcOffset := add(srcOffset, _10)\n                            }\n                            if lt(loopEnd, newLen)\n                            {\n                                let lastValue := mload(add(_13, srcOffset))\n                                sstore(dstPtr, and(lastValue, not(shr(and(shl(3, newLen), 248), not(0)))))\n                            }\n                            sstore(memberSlot, add(shl(_12, newLen), _12))\n                        }\n                        default {\n                            let value_2 := _4\n                            if newLen\n                            {\n                                value_2 := mload(add(_13, srcOffset))\n                            }\n                            sstore(memberSlot, or(and(value_2, not(shr(shl(3, newLen), not(0)))), shl(_12, newLen)))\n                        }\n                        let pos := mload(_2)\n                        let length_2 := mload(value0)\n                        copy_memory_to_memory_with_cleanup(add(value0, _10), pos, length_2)\n                        let end := add(pos, length_2)\n                        mstore(end, /** @src 0:660:680  \"nameToFavoriteNumber\" */ 0x02)\n                        /// @src 0:60:717  \"contract SimpleStorage {...\"\n                        sstore(keccak256(pos, add(sub(end, pos), _10)), value_1)\n                        return(_4, _4)\n                    }\n                    case 0x8bab8dd5 {\n                        if callvalue() { revert(_4, _4) }\n                        if slt(add(calldatasize(), not(3)), 32) { revert(_4, _4) }\n                        let offset_3 := calldataload(_3)\n                        if gt(offset_3, 0xffffffffffffffff) { revert(_4, _4) }\n                        let value0_1 := abi_decode_string(add(_3, offset_3), calldatasize())\n                        let pos_1 := mload(_2)\n                        let length_3 := mload(value0_1)\n                        copy_memory_to_memory_with_cleanup(add(value0_1, 32), pos_1, length_3)\n                        let end_1 := add(pos_1, length_3)\n                        mstore(end_1, /** @src 0:242:296  \"mapping(string => uint256) public nameToFavoriteNumber\" */ 2)\n                        /// @src 0:60:717  \"contract SimpleStorage {...\"\n                        let _16 := sload(keccak256(pos_1, add(sub(end_1, pos_1), 32)))\n                        let memPos_1 := mload(_2)\n                        mstore(memPos_1, _16)\n                        return(memPos_1, 32)\n                    }\n                }\n                revert(0, 0)\n            }\n            function storage_array_index_access_struct_Person__dyn(index) -> slot, offset\n            {\n                if iszero(lt(index, sload(/** @src 0:205:233  \"Person[] public listOfPeople\" */ 1)))\n                /// @src 0:60:717  \"contract SimpleStorage {...\"\n                {\n                    mstore(0, shl(224, 0x4e487b71))\n                    mstore(4, 0x32)\n                    revert(0, 0x24)\n                }\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 0:205:233  \"Person[] public listOfPeople\" */ 1)\n                /// @src 0:60:717  \"contract SimpleStorage {...\"\n                slot := add(80084422859880547211683076133703299733277748156566366325829078699459944778998, shl(/** @src 0:205:233  \"Person[] public listOfPeople\" */ 1, /** @src 0:60:717  \"contract SimpleStorage {...\" */ index))\n                offset := /** @src -1:-1:-1 */ 0\n            }\n            /// @src 0:60:717  \"contract SimpleStorage {...\"\n            function extract_byte_array_length(data) -> length\n            {\n                length := shr(1, data)\n                let outOfPlaceEncoding := and(data, 1)\n                if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n                if eq(outOfPlaceEncoding, lt(length, 32))\n                {\n                    mstore(0, shl(224, 0x4e487b71))\n                    mstore(4, 0x22)\n                    revert(0, 0x24)\n                }\n            }\n            function finalize_allocation(memPtr, size)\n            {\n                let newFreePtr := add(memPtr, and(add(size, 31), not(31)))\n                if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr))\n                {\n                    mstore(0, shl(224, 0x4e487b71))\n                    mstore(4, 0x41)\n                    revert(0, 0x24)\n                }\n                mstore(64, newFreePtr)\n            }\n            function copy_memory_to_memory_with_cleanup(src, dst, length)\n            {\n                let i := 0\n                for { } lt(i, length) { i := add(i, 32) }\n                {\n                    mstore(add(dst, i), mload(add(src, i)))\n                }\n                mstore(add(dst, length), 0)\n            }\n            function abi_decode_string(offset, end) -> array\n            {\n                if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n                let _1 := calldataload(offset)\n                if gt(_1, 0xffffffffffffffff)\n                {\n                    mstore(/** @src -1:-1:-1 */ 0, /** @src 0:60:717  \"contract SimpleStorage {...\" */ shl(224, 0x4e487b71))\n                    mstore(4, 0x41)\n                    revert(/** @src -1:-1:-1 */ 0, /** @src 0:60:717  \"contract SimpleStorage {...\" */ 0x24)\n                }\n                let memPtr := mload(64)\n                finalize_allocation(memPtr, add(and(add(_1, 0x1f), not(31)), 0x20))\n                mstore(memPtr, _1)\n                if gt(add(add(offset, _1), 0x20), end)\n                {\n                    revert(/** @src -1:-1:-1 */ 0, 0)\n                }\n                /// @src 0:60:717  \"contract SimpleStorage {...\"\n                calldatacopy(add(memPtr, 0x20), add(offset, 0x20), _1)\n                mstore(add(add(memPtr, _1), 0x20), /** @src -1:-1:-1 */ 0)\n                /// @src 0:60:717  \"contract SimpleStorage {...\"\n                array := memPtr\n            }\n        }\n        data \".metadata\" hex\"a2646970667358221220f4d3e372155109e14839b5622ba63ce7eef1a10cbc1a05432f7ade8cd372477e64736f6c63430008180033\"\n    }\n}\n","hash":"010000a123c3d81a708bf6d3967d4c5e14506589d956b6743fd30150acf2ae40","factoryDependencies":{}}},"Contracts/StorageFactory.sol":{"StorageFactory":{"abi":[{"inputs":[],"name":"createSimpleStorageContract","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"listOfSimpleStorageContracts","outputs":[{"internalType":"contract SimpleStorage","name":"","type":"address"}],"stateMutability":"view","type":"function"}],"metadata":{"optimizer_settings":{"is_debug_logging_enabled":false,"is_fallback_to_size_enabled":false,"is_system_request_memoization_disabled":false,"is_verify_each_enabled":false,"jump_table_density_threshold":null,"level_back_end":"Aggressive","level_middle_end":"Aggressive","level_middle_end_size":"Zero"},"solc_metadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"createSimpleStorageContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"listOfSimpleStorageContracts\",\"outputs\":[{\"internalType\":\"contract SimpleStorage\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"Contracts/StorageFactory.sol\":\"StorageFactory\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf[xa[r]EscLMcCTUtTOntnfDIulLculVcul [j]Tpeulxa[rul]xa[r]cLgvifCTUca[r]LSsTFOtfDnca[r]Iulc]jmul[jul] VcTOcul jmul:fDnTOcmu\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[]},\"sources\":{\"Contracts/SimpleStorage.sol\":{\"keccak256\":\"0xecad36087bef553af09b94043bef7407b010b76650bac212c694104e66a2dd63\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d6c6aa97cc32475749fe959056bf4525798f22fb0361f9954438aa053342e7ee\",\"dweb:/ipfs/QmNmiDvHykU7FfgiFvA44VXp6VHCQ83NE11vFEL5LguDTy\"]},\"Contracts/StorageFactory.sol\":{\"keccak256\":\"0xb6591772e5a79ddd6eb63c79f2d4484f776d4b3736014978a21c28a3901acd2b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://309c3c3293f17c72f711cd96a76d022ae38671ae87eab2e981d88d5b5506ff4a\",\"dweb:/ipfs/QmaXuBeRhSDAVDCvmnoD7vkBh1TEFnqfrmzEhnaVEfPqSj\"]}},\"version\":1}","solc_version":"0.8.24","solc_zkvm_edition":null,"zk_version":"1.4.1"},"evm":{"legacyAssembly":null,"assembly":"\t.text\n\t.file\t\"StorageFactory.sol:StorageFactory\"\n\t.globl\t__entry\n__entry:\n.func_begin0:\n\tnop\tstack+=[1]\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI0_0[0], r3, r3\n\tptr.add\tr1, r3, stack[@ptr_return_data]\n\tadd\t128, r0, r4\n\tst.1\t64, r4\n\tand!\t1, r2, r2\n\tjump.ne\t@.BB0_1\n\tsub.s!\t4, r3, r2\n\tjump.lt\t@.BB0_2\n\tld\tr1, r2\n\tshr.s\t224, r2, r2\n\tsub.s!\t@CPI0_2[0], r2, r4\n\tjump.eq\t@.BB0_20\n\tsub.s!\t@CPI0_3[0], r2, r1\n\tjump.ne\t@.BB0_2\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_2\n\tadd\t@CPI0_6[0], r0, r1\n\tst.1\t164, r1\n\tcontext.gas_left\tr1\n\tadd\t@CPI0_7[0], r0, r2\n\tst.1\t128, r2\n\tst.1\t132, r0\n\tadd\t96, r0, r2\n\tst.1\t196, r2\n\tadd\t@CPI0_0[0], r0, r2\n\tsub.s!\t@CPI0_0[0], r1, r3\n\tadd.ge\tr2, r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_8[0], r1, r1\n\tst.1\t228, r0\n\tadd\t32774, r0, r2\n\tnear_call\tr0, @__farcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_8\n\tld\tr1, r3\n\tsub!\tr3, r0, r1\n\tjump.ne\t@.BB0_12\n\tptr.add\tstack[@ptr_return_data], r0, r1\n\tadd\tstack[@returndatasize], r0, r2\n\tjump\t@.BB0_13\n.BB0_1:\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_2\n\tadd\t32, r0, r1\n\tst.2\t256, r1\n\tst.2\t288, r0\n\tadd\t@CPI0_1[0], r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_20:\n\tcontext.get_context_u128\tr2\n\tsub.s!\t36, r3, r3\n\tjump.lt\t@.BB0_2\n\tsub!\tr2, r0, r2\n\tjump.ne\t@.BB0_2\n\tptr.add.s\t4, r1, r1\n\tld\tr1, r1\n\tsload\tr0, r2\n\tsub!\tr1, r2, r2\n\tjump.ge\t@.BB0_2\n\tnear_call\tr0, @storage_array_index_access_contract_SimpleStorage_dyn, @DEFAULT_UNWIND\n\tshl.s\t3, r2, r2\n\tsload\tr1, r1\n\tshr\tr1, r2, r1\n\tand\t@CPI0_4[0], r1, r1\n\tsub.s!\t255, r2, r2\n\tadd.gt\tr0, r0, r1\n\tld.1\t64, r2\n\tst.1\tr2, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t64, r2, r1\n\tor\t@CPI0_5[0], r1, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_2:\n\tadd\tr0, r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_8:\n\tptr.add\tr1, r0, stack[@ptr_return_data]\n\tadd\tr1, r0, r2\n\tshr.s\t96, r2, r2\n\tand\t@CPI0_0[0], r2, stack[@returndatasize]\n\tand\t@CPI0_0[0], r2, r2\n.BB0_13:\n\tld.1\t64, r3\n\tand\t31, r2, r4\n\tshr.s!\t5, r2, r5\n\tjump.eq\t@.BB0_24\n\tadd\tr0, r0, r6\n.BB0_15:\n\tshl.s\t5, r6, r7\n\tadd\tr3, r7, r8\n\tptr.add\tr1, r7, r7\n\tld\tr7, r7\n\tst.1\tr8, r7\n\tadd\t1, r6, r6\n\tsub!\tr6, r5, r7\n\tjump.lt\t@.BB0_15\n.BB0_24:\n\tsub!\tr4, r0, r6\n\tjump.eq\t@.BB0_17\n\tshl.s\t5, r5, r5\n\tptr.add\tr1, r5, r1\n\tadd\tr3, r5, r5\n\tshl.s\t3, r4, r4\n\tld.1\tr5, r6\n\tshl\tr6, r4, r6\n\tshr\tr6, r4, r6\n\tld\tr1, r1\n\tsub\t256, r4, r4\n\tshr\tr1, r4, r1\n\tshl\tr1, r4, r1\n\tor\tr1, r6, r1\n\tst.1\tr5, r1\n.BB0_17:\n\tadd\t@CPI0_0[0], r0, r1\n\tsub.s!\t@CPI0_0[0], r3, r4\n\tadd.ge\tr1, r0, r3\n\tsub.s!\t@CPI0_0[0], r2, r4\n\tadd.ge\tr1, r0, r2\n\tshl.s\t96, r2, r1\n\tshl.s\t64, r3, r2\n\tor\tr2, r1, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_12:\n\tsload\tr0, r1\n\tsub.s!\t@CPI0_9[0], r1, r2\n\tjump.le\t@.BB0_19\n\tadd\t@CPI0_10[0], r0, r1\n\tst.1\t0, r1\n\tadd\t65, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI0_11[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_19:\n\tadd\t1, r1, r2\n\tsstore\tr0, r2\n\tadd\tr3, r0, stack-[1]\n\tnear_call\tr0, @storage_array_index_access_contract_SimpleStorage_dyn, @DEFAULT_UNWIND\n\tshl.s\t3, r2, r2\n\tshl\t@CPI0_4[0], r2, r3\n\tsub.s\t1, r0, r4\n\txor\tr3, r4, r3\n\tsub.s!\t255, r2, r5\n\tadd.le\tr3, r0, r4\n\tadd\tstack-[1], r0, r3\n\tand\t@CPI0_4[0], r3, r3\n\tshl\tr3, r2, r2\n\tadd.gt\tr0, r0, r2\n\tsload\tr1, r3\n\tand\tr4, r3, r3\n\tor\tr3, r2, r2\n\tsstore\tr1, r2\n\tadd\tr0, r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.func_end0:\n\nstorage_array_index_access_contract_SimpleStorage_dyn:\n.func_begin1:\n\tsload\tr0, r2\n\tsub!\tr2, r1, r2\n\tjump.le\t@.BB1_1\n\tadd\t@CPI1_2[0], r1, r1\n\tst.1\t0, r0\n\tadd\tr0, r0, r2\n\tret\n.BB1_1:\n\tadd\t@CPI1_0[0], r0, r1\n\tst.1\t0, r1\n\tadd\t50, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI1_1[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.func_end1:\n\n__farcall:\n.func_begin2:\n.tmp0:\n\tfar_call\tr1, r2, @.BB2_2\n.tmp1:\n\tadd\t1, r0, r2\n\tret\n.BB2_2:\n.tmp2:\n\tadd\tr0, r0, r2\n\tret\n.func_end2:\n\n\t.data\n\t.p2align\t5, 0x0\nreturndatasize:\n\t.cell 0\n\n\t.p2align\t5, 0x0\nptr_return_data:\n.cell\t0\n\n\t.note.GNU-stack\n\t.rodata\nCPI0_0:\n\t.cell 4294967295\nCPI0_1:\n\t.cell 53919893334301279589334030174039261352344891250716429051063678533632\nCPI0_2:\n\t.cell 4087296053\nCPI0_3:\n\t.cell 500852033\nCPI0_4:\n\t.cell 1461501637330902918203684832716283019655932542975\nCPI0_5:\n\t.cell 2535301200456458802993406410752\nCPI0_6:\n\t.cell 452317192901175619777084405521064923051487108650262689876165521179990470208\nCPI0_7:\n\t.cell -45094662312588414058508742492242807367897819822786606328124609013070528553987\nCPI0_8:\n\t.cell 904625697166532776746648320380374280103671765658434360802338178844445376512\nCPI0_9:\n\t.cell 18446744073709551615\nCPI0_10:\nCPI1_0:\n\t.cell 35408467139433450592217433187231851964531694900788300625387963629091585785856\nCPI0_11:\nCPI1_1:\n\t.cell 2852213850513516153367582212096\nCPI1_2:\n\t.cell 18569430475105882587588266137607568536673111973893317399460219858819262702947\n","bytecode":{"object":"00020000000000020001000000000002000000000301001900000060033002700000002c0330019700010000003103550000008004000039000000400040043f00000001022001900000002d0000c13d000000040230008c0000004e0000413d000000000201043b000000e0022002700000002e0420009c000000350000613d0000002f0120009c0000004e0000c13d0000000001000416000000000101004b0000004e0000c13d0000003201000041000000a40010043f00000000010004140000003302000041000000800020043f000000840000043f0000006002000039000000c40020043f0000002c020000410000002c0310009c0000000001028019000000c00110021000000034011001c7000000e40000043f000080060200003900a900a40000040f0000000102200190000000500000613d000000000301043b000000000103004b0000007a0000c13d00000001010003670000000002000031000000550000013d0000000001000416000000000101004b0000004e0000c13d0000002001000039000001000010044300000120000004430000002d01000041000000aa0001042e0000000002000416000000240330008c0000004e0000413d000000000202004b0000004e0000c13d0000000401100370000000000101043b000000000200041a000000000221004b0000004e0000813d00a900970000040f0000000302200210000000000101041a000000000121022f0000003001100197000000ff0220008c0000000001002019000000400200043d00000000001204350000002c010000410000002c0320009c0000000002018019000000400120021000000031011001c7000000aa0001042e0000000001000019000000ab000104300001000000010355000000000201001900000060022002700000002c0020019d0000002c02200197000000400300043d0000001f0420018f0000000505200272000000620000613d000000000600001900000005076002100000000008730019000000000771034f000000000707043b00000000007804350000000106600039000000000756004b0000005a0000413d000000000604004b000000710000613d0000000505500210000000000151034f00000000055300190000000304400210000000000605043300000000064601cf000000000646022f000000000101043b0000010004400089000000000141022f00000000014101cf000000000161019f00000000001504350000002c010000410000002c0430009c00000000030180190000002c0420009c000000000201801900000060012002100000004002300210000000000112019f000000ab00010430000000000100041a000000350210009c000000830000a13d000000360100004100000000001004350000004101000039000000040010043f0000003701000041000000ab000104300000000102100039000000000020041b000100000003001d00a900970000040f0000000302200210000000300320021f000000010400008a000000000343013f000000ff0520008c000000000403a0190000000103000029000000300330019700000000022301cf0000000002002019000000000301041a000000000334016f000000000223019f000000000021041b0000000001000019000000aa0001042e000000000200041a000000000212004b0000009e0000a13d000000380110004100000000000004350000000002000019000000000001042d000000360100004100000000001004350000003201000039000000040010043f0000003701000041000000ab00010430000000a7002104210000000102000039000000000001042d0000000002000019000000000001042d000000a900000432000000aa0001042e000000ab00010430000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffffffff000000020000000000000000000000000000004000000100000000000000000000000000000000000000000000000000000000000000000000000000f39f3035000000000000000000000000000000000000000000000000000000001dda6541000000000000000000000000ffffffffffffffffffffffffffffffffffffffff0000000000000000000000000000000000000020000000000000000000000000010000a123c3d81a708bf6d3967d4c5e14506589d956b6743fd30150acf2ae409c4d535bdea7cd8a978f128b93471df48c7dbab89d703809115bdc118c235bfd0200000000000000000000000000000000000084000000800000000000000000000000000000000000000000000000000000000000000000ffffffffffffffff4e487b71000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000024000000000000000000000000290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563000000000000000000000000000000000000000000000000000000000000000019f87e814e3339048a69396828931f039f01692b28823a77353b1d420f014e51"},"methodIdentifiers":{"createSimpleStorageContract()":"1dda6541","listOfSimpleStorageContracts(uint256)":"f39f3035"}},"irOptimized":"/// @use-src 1:\"Contracts/StorageFactory.sol\"\nobject \"StorageFactory_85\" {\n    code {\n        {\n            /// @src 1:114:388  \"contract StorageFactory{...\"\n            let _1 := memoryguard(0x80)\n            mstore(64, _1)\n            if callvalue() { revert(0, 0) }\n            let _2 := datasize(\"StorageFactory_85_deployed\")\n            codecopy(_1, dataoffset(\"StorageFactory_85_deployed\"), _2)\n            return(_1, _2)\n        }\n    }\n    /// @use-src 1:\"Contracts/StorageFactory.sol\"\n    object \"StorageFactory_85_deployed\" {\n        code {\n            {\n                /// @src 1:114:388  \"contract StorageFactory{...\"\n                let _1 := memoryguard(0x80)\n                mstore(64, _1)\n                if iszero(lt(calldatasize(), 4))\n                {\n                    let _2 := 0\n                    switch shr(224, calldataload(_2))\n                    case 0x1dda6541 {\n                        if callvalue() { revert(_2, _2) }\n                        if slt(add(calldatasize(), not(3)), _2) { revert(_2, _2) }\n                        /// @src 1:296:315  \"new SimpleStorage()\"\n                        let _3 := datasize(\"SimpleStorage_58\")\n                        let _4 := add(_1, _3)\n                        if or(gt(_4, 0xffffffffffffffff), lt(_4, _1))\n                        {\n                            /// @src 1:114:388  \"contract StorageFactory{...\"\n                            mstore(_2, shl(224, 0x4e487b71))\n                            mstore(4, 0x41)\n                            revert(_2, 0x24)\n                        }\n                        /// @src 1:296:315  \"new SimpleStorage()\"\n                        datacopy(_1, dataoffset(\"SimpleStorage_58\"), _3)\n                        let expr_address := create(/** @src 1:114:388  \"contract StorageFactory{...\" */ _2, /** @src 1:296:315  \"new SimpleStorage()\" */ _1, sub(_4, _1))\n                        if iszero(expr_address)\n                        {\n                            /// @src 1:114:388  \"contract StorageFactory{...\"\n                            let pos := mload(64)\n                            returndatacopy(pos, _2, returndatasize())\n                            revert(pos, returndatasize())\n                        }\n                        let oldLen := sload(_2)\n                        if iszero(lt(oldLen, 18446744073709551616))\n                        {\n                            mstore(_2, shl(224, 0x4e487b71))\n                            mstore(4, 0x41)\n                            revert(_2, 0x24)\n                        }\n                        sstore(_2, add(oldLen, 1))\n                        let slot, offset := storage_array_index_access_contract_SimpleStorage_dyn(oldLen)\n                        let _5 := sub(shl(160, /** @src 1:296:315  \"new SimpleStorage()\" */ 1), 1)\n                        /// @src 1:114:388  \"contract StorageFactory{...\"\n                        let _6 := sload(slot)\n                        let shiftBits := shl(3, offset)\n                        sstore(slot, or(and(_6, not(shl(shiftBits, _5))), shl(shiftBits, and(expr_address, _5))))\n                        return(_2, _2)\n                    }\n                    case 0xf39f3035 {\n                        if callvalue() { revert(_2, _2) }\n                        if slt(add(calldatasize(), not(3)), 32) { revert(_2, _2) }\n                        let value := calldataload(4)\n                        /// @src 1:146:197  \"SimpleStorage[] public listOfSimpleStorageContracts\"\n                        if iszero(lt(value, /** @src 1:114:388  \"contract StorageFactory{...\" */ sload(_2)))\n                        /// @src 1:146:197  \"SimpleStorage[] public listOfSimpleStorageContracts\"\n                        {\n                            revert(/** @src 1:114:388  \"contract StorageFactory{...\" */ _2, _2)\n                        }\n                        /// @src 1:146:197  \"SimpleStorage[] public listOfSimpleStorageContracts\"\n                        let slot_1, offset_1 := storage_array_index_access_contract_SimpleStorage_dyn(value)\n                        /// @src 1:114:388  \"contract StorageFactory{...\"\n                        let _7 := sload(/** @src 1:146:197  \"SimpleStorage[] public listOfSimpleStorageContracts\" */ slot_1)\n                        /// @src 1:114:388  \"contract StorageFactory{...\"\n                        let memPos := mload(64)\n                        mstore(memPos, and(shr(shl(3, offset_1), _7), sub(shl(160, /** @src 1:296:315  \"new SimpleStorage()\" */ 1), 1)))\n                        /// @src 1:114:388  \"contract StorageFactory{...\"\n                        return(memPos, 32)\n                    }\n                }\n                revert(0, 0)\n            }\n            function storage_array_index_access_contract_SimpleStorage_dyn(index) -> slot, offset\n            {\n                let _1 := 0\n                if iszero(lt(index, sload(_1)))\n                {\n                    mstore(_1, shl(224, 0x4e487b71))\n                    mstore(4, 0x32)\n                    revert(_1, 0x24)\n                }\n                mstore(_1, _1)\n                slot := add(18569430475105882587588266137607568536673111973893317399460219858819262702947, index)\n                offset := _1\n            }\n        }\n        /// @use-src 0:\"Contracts/SimpleStorage.sol\"\n        object \"SimpleStorage_58\" {\n            code {\n                {\n                    /// @src 0:60:717  \"contract SimpleStorage {...\"\n                    let _1 := memoryguard(0x80)\n                    mstore(64, _1)\n                    if callvalue() { revert(0, 0) }\n                    let _2 := datasize(\"SimpleStorage_58_deployed\")\n                    codecopy(_1, dataoffset(\"SimpleStorage_58_deployed\"), _2)\n                    return(_1, _2)\n                }\n            }\n            /// @use-src 0:\"Contracts/SimpleStorage.sol\"\n            object \"SimpleStorage_58_deployed\" {\n                code {\n                    {\n                        /// @src 0:60:717  \"contract SimpleStorage {...\"\n                        let _1 := memoryguard(0x80)\n                        let _2 := 64\n                        mstore(_2, _1)\n                        let _3 := 4\n                        if iszero(lt(calldatasize(), _3))\n                        {\n                            let _4 := 0\n                            switch shr(224, calldataload(_4))\n                            case 0x2e64cec1 {\n                                if callvalue() { revert(_4, _4) }\n                                if slt(add(calldatasize(), not(3)), _4) { revert(_4, _4) }\n                                mstore(_1, sload(_4))\n                                return(_1, 32)\n                            }\n                            case 0x2ebce631 {\n                                if callvalue() { revert(_4, _4) }\n                                let _5 := 32\n                                if slt(add(calldatasize(), not(3)), _5) { revert(_4, _4) }\n                                let value := calldataload(_3)\n                                let _6 := 1\n                                /// @src 0:205:233  \"Person[] public listOfPeople\"\n                                if iszero(lt(value, /** @src 0:60:717  \"contract SimpleStorage {...\" */ sload(1)))\n                                /// @src 0:205:233  \"Person[] public listOfPeople\"\n                                {\n                                    revert(/** @src 0:60:717  \"contract SimpleStorage {...\" */ _4, _4)\n                                }\n                                /// @src 0:205:233  \"Person[] public listOfPeople\"\n                                let slot, offset := storage_array_index_access_struct_Person__dyn(value)\n                                /// @src 0:60:717  \"contract SimpleStorage {...\"\n                                let _7 := sload(/** @src 0:205:233  \"Person[] public listOfPeople\" */ slot)\n                                let _8 := add(slot, /** @src 0:60:717  \"contract SimpleStorage {...\" */ 1)\n                                let memPtr := mload(_2)\n                                let ret := _4\n                                let slotValue := sload(_8)\n                                let length := extract_byte_array_length(slotValue)\n                                mstore(memPtr, length)\n                                let updated_pos := add(memPtr, _5)\n                                switch and(slotValue, 1)\n                                case 0 {\n                                    mstore(updated_pos, and(slotValue, not(255)))\n                                    ret := add(add(memPtr, shl(5, iszero(iszero(length)))), _5)\n                                }\n                                case 1 {\n                                    mstore(_4, _8)\n                                    let dataPos := keccak256(_4, _5)\n                                    let i := _4\n                                    for { } lt(i, length) { i := add(i, _5) }\n                                    {\n                                        mstore(add(add(memPtr, i), _5), sload(dataPos))\n                                        dataPos := add(dataPos, _6)\n                                    }\n                                    ret := add(add(memPtr, i), _5)\n                                }\n                                finalize_allocation(memPtr, sub(ret, memPtr))\n                                let memPos := mload(_2)\n                                mstore(memPos, _7)\n                                mstore(add(memPos, _5), _2)\n                                let length_1 := mload(memPtr)\n                                mstore(add(memPos, _2), length_1)\n                                copy_memory_to_memory_with_cleanup(updated_pos, add(memPos, 96), length_1)\n                                return(memPos, add(sub(add(memPos, and(add(length_1, 31), not(31))), memPos), 96))\n                            }\n                            case 0x6057361d {\n                                if callvalue() { revert(_4, _4) }\n                                if slt(add(calldatasize(), not(3)), 32) { revert(_4, _4) }\n                                sstore(_4, calldataload(_3))\n                                return(_4, _4)\n                            }\n                            case 0x6f760f41 {\n                                if callvalue() { revert(_4, _4) }\n                                if slt(add(calldatasize(), not(3)), _2) { revert(_4, _4) }\n                                let offset_1 := calldataload(_3)\n                                let _9 := 0xffffffffffffffff\n                                if gt(offset_1, _9) { revert(_4, _4) }\n                                let value0 := abi_decode_string(add(_3, offset_1), calldatasize())\n                                let value_1 := calldataload(36)\n                                let memPtr_1 := mload(_2)\n                                let newFreePtr := add(memPtr_1, _2)\n                                if or(gt(newFreePtr, _9), lt(newFreePtr, memPtr_1))\n                                {\n                                    mstore(_4, shl(224, 0x4e487b71))\n                                    mstore(_3, 0x41)\n                                    revert(_4, 36)\n                                }\n                                mstore(_2, newFreePtr)\n                                mstore(memPtr_1, value_1)\n                                let _10 := 32\n                                /// @src 0:618:647  \"Person(_favoriteNumber,_name)\"\n                                let _11 := add(memPtr_1, /** @src 0:60:717  \"contract SimpleStorage {...\" */ _10)\n                                mstore(_11, value0)\n                                let _12 := 1\n                                let oldLen := sload(_12)\n                                if iszero(lt(oldLen, 18446744073709551616))\n                                {\n                                    mstore(_4, shl(224, 0x4e487b71))\n                                    mstore(_3, 0x41)\n                                    revert(_4, 36)\n                                }\n                                sstore(_12, add(oldLen, _12))\n                                let slot_1, offset_2 := storage_array_index_access_struct_Person__dyn(oldLen)\n                                if offset_2\n                                {\n                                    mstore(_4, shl(224, 0x4e487b71))\n                                    mstore(_3, _4)\n                                    revert(_4, 36)\n                                }\n                                sstore(slot_1, mload(memPtr_1))\n                                let memberSlot := add(slot_1, _12)\n                                let _13 := mload(_11)\n                                let newLen := mload(_13)\n                                if gt(newLen, _9)\n                                {\n                                    mstore(_4, shl(224, 0x4e487b71))\n                                    mstore(_3, 0x41)\n                                    revert(_4, 36)\n                                }\n                                let _14 := extract_byte_array_length(sload(memberSlot))\n                                if gt(_14, 31)\n                                {\n                                    mstore(_4, memberSlot)\n                                    let data := keccak256(_4, _10)\n                                    let deleteStart := add(data, shr(5, add(newLen, 31)))\n                                    if lt(newLen, _10) { deleteStart := data }\n                                    let _15 := add(data, shr(5, add(_14, 31)))\n                                    let start := deleteStart\n                                    for { } lt(start, _15) { start := add(start, _12) }\n                                    { sstore(start, _4) }\n                                }\n                                let srcOffset := _4\n                                srcOffset := _10\n                                switch gt(newLen, 31)\n                                case 1 {\n                                    let loopEnd := and(newLen, not(31))\n                                    mstore(_4, memberSlot)\n                                    let dstPtr := keccak256(_4, _10)\n                                    let i_1 := _4\n                                    for { } lt(i_1, loopEnd) { i_1 := add(i_1, _10) }\n                                    {\n                                        sstore(dstPtr, mload(add(_13, srcOffset)))\n                                        dstPtr := add(dstPtr, _12)\n                                        srcOffset := add(srcOffset, _10)\n                                    }\n                                    if lt(loopEnd, newLen)\n                                    {\n                                        let lastValue := mload(add(_13, srcOffset))\n                                        sstore(dstPtr, and(lastValue, not(shr(and(shl(3, newLen), 248), not(0)))))\n                                    }\n                                    sstore(memberSlot, add(shl(_12, newLen), _12))\n                                }\n                                default {\n                                    let value_2 := _4\n                                    if newLen\n                                    {\n                                        value_2 := mload(add(_13, srcOffset))\n                                    }\n                                    sstore(memberSlot, or(and(value_2, not(shr(shl(3, newLen), not(0)))), shl(_12, newLen)))\n                                }\n                                let pos := mload(_2)\n                                let length_2 := mload(value0)\n                                copy_memory_to_memory_with_cleanup(add(value0, _10), pos, length_2)\n                                let end := add(pos, length_2)\n                                mstore(end, /** @src 0:660:680  \"nameToFavoriteNumber\" */ 0x02)\n                                /// @src 0:60:717  \"contract SimpleStorage {...\"\n                                sstore(keccak256(pos, add(sub(end, pos), _10)), value_1)\n                                return(_4, _4)\n                            }\n                            case 0x8bab8dd5 {\n                                if callvalue() { revert(_4, _4) }\n                                if slt(add(calldatasize(), not(3)), 32) { revert(_4, _4) }\n                                let offset_3 := calldataload(_3)\n                                if gt(offset_3, 0xffffffffffffffff) { revert(_4, _4) }\n                                let value0_1 := abi_decode_string(add(_3, offset_3), calldatasize())\n                                let pos_1 := mload(_2)\n                                let length_3 := mload(value0_1)\n                                copy_memory_to_memory_with_cleanup(add(value0_1, 32), pos_1, length_3)\n                                let end_1 := add(pos_1, length_3)\n                                mstore(end_1, /** @src 0:242:296  \"mapping(string => uint256) public nameToFavoriteNumber\" */ 2)\n                                /// @src 0:60:717  \"contract SimpleStorage {...\"\n                                let _16 := sload(keccak256(pos_1, add(sub(end_1, pos_1), 32)))\n                                let memPos_1 := mload(_2)\n                                mstore(memPos_1, _16)\n                                return(memPos_1, 32)\n                            }\n                        }\n                        revert(0, 0)\n                    }\n                    function storage_array_index_access_struct_Person__dyn(index) -> slot, offset\n                    {\n                        if iszero(lt(index, sload(/** @src 0:205:233  \"Person[] public listOfPeople\" */ 1)))\n                        /// @src 0:60:717  \"contract SimpleStorage {...\"\n                        {\n                            mstore(0, shl(224, 0x4e487b71))\n                            mstore(4, 0x32)\n                            revert(0, 0x24)\n                        }\n                        mstore(/** @src -1:-1:-1 */ 0, /** @src 0:205:233  \"Person[] public listOfPeople\" */ 1)\n                        /// @src 0:60:717  \"contract SimpleStorage {...\"\n                        slot := add(80084422859880547211683076133703299733277748156566366325829078699459944778998, shl(/** @src 0:205:233  \"Person[] public listOfPeople\" */ 1, /** @src 0:60:717  \"contract SimpleStorage {...\" */ index))\n                        offset := /** @src -1:-1:-1 */ 0\n                    }\n                    /// @src 0:60:717  \"contract SimpleStorage {...\"\n                    function extract_byte_array_length(data) -> length\n                    {\n                        length := shr(1, data)\n                        let outOfPlaceEncoding := and(data, 1)\n                        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n                        if eq(outOfPlaceEncoding, lt(length, 32))\n                        {\n                            mstore(0, shl(224, 0x4e487b71))\n                            mstore(4, 0x22)\n                            revert(0, 0x24)\n                        }\n                    }\n                    function finalize_allocation(memPtr, size)\n                    {\n                        let newFreePtr := add(memPtr, and(add(size, 31), not(31)))\n                        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr))\n                        {\n                            mstore(0, shl(224, 0x4e487b71))\n                            mstore(4, 0x41)\n                            revert(0, 0x24)\n                        }\n                        mstore(64, newFreePtr)\n                    }\n                    function copy_memory_to_memory_with_cleanup(src, dst, length)\n                    {\n                        let i := 0\n                        for { } lt(i, length) { i := add(i, 32) }\n                        {\n                            mstore(add(dst, i), mload(add(src, i)))\n                        }\n                        mstore(add(dst, length), 0)\n                    }\n                    function abi_decode_string(offset, end) -> array\n                    {\n                        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n                        let _1 := calldataload(offset)\n                        if gt(_1, 0xffffffffffffffff)\n                        {\n                            mstore(/** @src -1:-1:-1 */ 0, /** @src 0:60:717  \"contract SimpleStorage {...\" */ shl(224, 0x4e487b71))\n                            mstore(4, 0x41)\n                            revert(/** @src -1:-1:-1 */ 0, /** @src 0:60:717  \"contract SimpleStorage {...\" */ 0x24)\n                        }\n                        let memPtr := mload(64)\n                        finalize_allocation(memPtr, add(and(add(_1, 0x1f), not(31)), 0x20))\n                        mstore(memPtr, _1)\n                        if gt(add(add(offset, _1), 0x20), end)\n                        {\n                            revert(/** @src -1:-1:-1 */ 0, 0)\n                        }\n                        /// @src 0:60:717  \"contract SimpleStorage {...\"\n                        calldatacopy(add(memPtr, 0x20), add(offset, 0x20), _1)\n                        mstore(add(add(memPtr, _1), 0x20), /** @src -1:-1:-1 */ 0)\n                        /// @src 0:60:717  \"contract SimpleStorage {...\"\n                        array := memPtr\n                    }\n                }\n                data \".metadata\" hex\"a2646970667358221220f4d3e372155109e14839b5622ba63ce7eef1a10cbc1a05432f7ade8cd372477e64736f6c63430008180033\"\n            }\n        }\n        data \".metadata\" hex\"a2646970667358221220c47baa760e961cd9037b822af82fbe5bcda75119c48ea6df6c8c507353233e2764736f6c63430008180033\"\n    }\n}\n","hash":"0100003bed79cb3bd23df494a8ece6141edb0f633a928fb77d34555aaa813a22","factoryDependencies":{"010000a123c3d81a708bf6d3967d4c5e14506589d956b6743fd30150acf2ae40":"Contracts/SimpleStorage.sol:SimpleStorage"}}}}}}